syntax = "proto3";
package users;

service Users {
  // Create a new user in the system
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // Authenticate as a particular user in the system
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);

  // Get data about one or more users in the system given their IDs
  rpc GetUsersByIds(GetUsersByIdsRequest) returns (GetUsersByIdsResponse);

  // Get data about all users in the system
  rpc GetAllUsers(GetAllUsersRequest) returns (stream User);

  // Authenticate with a JWT
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
}

// Role of a user in the system
enum UserRole {
  USER_ROLE_STANDARD = 0;
  USER_ROLE_MODERATOR = 1;
  USER_ROLE_ADMINISTRATOR = 2;
}

// A registered user
message User {
  int32 id = 1; // ID of the user
  string username = 2; // Name of the user
  UserRole role = 3; // Role of the user
}

// Request to create a new user
message CreateUserRequest {
  string username = 1; // Desired username for new user
  string password = 2; // Desired password for new user
}

// Successful response from creating a user
message CreateUserResponse {
  User user = 1;
}

// Request to authenticate as a specified user
message GetTokenRequest {
  string username = 1; // Desired username to authenticate as
  string password = 2; // Password for the desired user
}

// Successful response from authenticating
message GetTokenResponse {
  string token = 1; // Authorization token to use for making requests
}

// Request to get information for one or more users by their IDs
message GetUsersByIdsRequest {
  repeated int32 user_ids = 1; // IDs to get user information for
}

// Successful response from getting users by IDs
message GetUsersByIdsResponse {
  repeated User users = 1; // Users corresponding to the requested IDs
}

// Request to get information about all users in the system
message GetAllUsersRequest {}

// Request to verify a JWT
message AuthenticateRequest {
  string token = 1;
}

// Response from verifying a JWT
message AuthenticateResponse {
  User user = 1;
}
