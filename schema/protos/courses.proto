syntax = "proto3";
package courses;

import "shared.proto";

service Courses {
  // Gets a list of course documents
  rpc GetDocuments(GetDocumentsRequest) returns (GetDocumentsResponse);
  // Gets documents corresponding to the provided set of IDs
  rpc GetDocumentsByIds(GetDocumentsByIDsRequest) returns (GetDocumentsByIDsResponse);
  // Gets a list of pages for a specified document
  rpc GetDocumentPages(GetDocumentPagesRequest) returns (GetDocumentPagesResponse);
  // Gets pages corresponding to the provided set of IDs
  rpc GetPagesByIds(GetPagesByIDsRequest) returns (GetPagesByIDsResponse);
  // Gets a list of tracks for a specified document
  rpc GetDocumentTracks(GetDocumentTracksRequest) returns (GetDocumentTracksResponse);
  // Gets tracks corresponding to the provided set of IDs
  rpc GetTracksByIds(GetTracksByIDsRequest) returns (GetTracksByIDsResponse);
  // Updates the title of a track
  rpc UpdateTrackTitle(UpdateTrackTitleRequest) returns (UpdateTrackTitleResponse);
  // Gets a list of bookmarks for a specified document
  rpc GetDocumentBookmarks(GetDocumentBookmarksRequest) returns (GetDocumentBookmarksResponse);
  // Gets bookmarks corresponding to the provided set of IDs
  rpc GetBookmarksByIds(GetBookmarksByIDsRequest) returns (GetBookmarksByIDsResponse);
  // Create a bookmark
  rpc CreateBookmark(CreateBookmarkRequest) returns (CreateBookmarkResponse);
  // Delete a bookmark
  rpc DeleteBookmark(DeleteBookmarkRequest) returns (DeleteBookmarkResponse);
  // Get a list of anchors for the specified page
  rpc GetAnchorsByPageIds(GetAnchorsByPageIDsRequest) returns (GetAnchorsByPageIDsResponse);
  // Gets anchors corresponding to a provided set of IDs
  rpc GetAnchorsByIds(GetAnchorsByIDsRequest) returns (GetAnchorsByIDsResponse);
  // Gets a list of user anchors for the specified page
  rpc GetUserAnchorsByPageIds(GetUserAnchorsByPageIDsRequest) returns (GetUserAnchorsByPageIDsResponse);
  // Gets user anchors corresponding to a provided set of IDs
  rpc GetUserAnchorsByIds(GetUserAnchorsByIDsRequest) returns (GetUserAnchorsByIDsResponse);
  // Creates an anchor mapping a specified position on a page to a track time
  rpc CreateAnchor(CreateAnchorRequest) returns (CreateAnchorResponse);
  // Deletes an anchor
  rpc DeleteAnchor(DeleteAnchorRequest) returns (DeleteAnchorResponse);
  // Creates a user anchor mapping a specified position on a page to a track time
  rpc CreateUserAnchor(CreateUserAnchorRequest) returns (CreateUserAnchorResponse);
  // Deletes a user anchor
  rpc DeleteUserAnchor(DeleteUserAnchorRequest) returns (DeleteUserAnchorResponse);
}

message Document {
  int32 id = 1;
  string title = 2;
  string created_at = 3;
  string updated_at = 4;
}

message GetDocumentsRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message GetDocumentsResponse {
  repeated Document documents = 1;
  int32 total = 2;
}

message GetDocumentsByIDsRequest {
  repeated int32 ids = 1;
}

message GetDocumentsByIDsResponse {
  repeated Document documents = 1;
}

message Page {
  int32 id = 1;
  int32 page_number = 2;
  string image_path = 3;
  float aspect_ratio = 4;
  float height = 5;
  int32 document_id = 6;
}

message GetDocumentPagesRequest {
  int32 document_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetDocumentPagesResponse {
  repeated Page pages = 1;
  int32 total = 2;
}

message GetPagesByIDsRequest {
  repeated int32 ids = 1;
}

message GetPagesByIDsResponse {
  repeated Page pages = 1;
}

message Track {
  int32 id = 1;
  int32 track_number = 2;
  string title = 3;
  string audio_path = 4;
  int32 document_id = 5;
}

message GetDocumentTracksRequest {
  int32 document_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetDocumentTracksResponse {
  repeated Track tracks = 1;
  int32 total = 2;
}

message GetTracksByIDsRequest {
  repeated int32 ids = 1;
}

message GetTracksByIDsResponse {
  repeated Track tracks = 1;
}

message UpdateTrackTitleRequest {
  shared.User active_user = 1;
  int32 track_id = 2;
  string title = 3;
}

message UpdateTrackTitleResponse {
  Track track = 1;
}

message Bookmark {
  int32 id = 1;
  string title = 2;
  int32 page_id = 3;
  int32 document_id = 4;
}

message CreateBookmarkRequest {
  shared.User active_user = 1;
  string title = 2;
  int32 page_id = 3;
  int32 document_id = 4;
}

message CreateBookmarkResponse {
  Bookmark bookmark = 1;
}

message DeleteBookmarkRequest {
  shared.User active_user = 1;
  int32 bookmark_id = 2;
}

message DeleteBookmarkResponse {
  bool success = 1;
}

message GetDocumentBookmarksRequest {
  int32 document_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetDocumentBookmarksResponse {
  repeated Bookmark bookmarks = 1;
  int32 total = 2;
}

message GetBookmarksByIDsRequest {
  repeated int32 ids = 1;
}

message GetBookmarksByIDsResponse {
  repeated Bookmark bookmarks = 1;
}

message Anchor {
  int32 id = 1;
  string title = 2;
  float track_time = 3;
  float position_top = 4;
  float position_left = 5;
  int32 page_id = 6;
  int32 track_id = 7;
  string created_at = 8;
  string updated_at = 9;
}

message PageAnchors {
  repeated Anchor anchors = 1;
}

message GetAnchorsByPageIDsRequest {
  repeated int32 ids = 1;
}

message GetAnchorsByPageIDsResponse {
  map<int32, PageAnchors> anchors = 1;
}

message GetAnchorsByIDsRequest {
  repeated int32 ids = 1;
}

message GetAnchorsByIDsResponse {
  repeated Anchor anchors = 1;
}

message UserAnchor {
  int32 id = 1;
  string title = 2;
  float track_time = 3;
  float position_top = 4;
  float position_left = 5;
  int32 page_id = 6;
  int32 track_id = 7;
  string created_at = 8;
  string updated_at = 9;
  int32 owner = 10;
}

message PageUserAnchors {
  repeated UserAnchor user_anchors = 1;
}

message GetUserAnchorsByPageIDsRequest {
  repeated int32 ids = 1;
}

message GetUserAnchorsByPageIDsResponse {
  map<int32, PageUserAnchors> user_anchors = 1;
}

message GetUserAnchorsByIDsRequest {
  repeated int32 ids = 1;
}

message GetUserAnchorsByIDsResponse {
  repeated UserAnchor user_anchors = 1;
}

message CreateUserAnchorRequest {
  shared.User active_user = 1;
  string title = 2;
  float track_time = 3;
  float position_top = 4;
  float position_left = 5;
  int32 page_id = 6;
  int32 track_id = 7;
}

message CreateUserAnchorResponse {
  UserAnchor user_anchor = 1;
}

message DeleteUserAnchorRequest {
  shared.User active_user = 1;
  int32 id = 2;
}

message DeleteUserAnchorResponse {
  bool success = 1;
}

message CreateAnchorRequest {
  shared.User active_user = 1;
  string title = 2;
  float track_time = 3;
  float position_top = 4;
  float position_left = 5;
  int32 page_id = 6;
  int32 track_id = 7;
}

message CreateAnchorResponse {
  Anchor anchor = 1;
}

message DeleteAnchorRequest {
  shared.User active_user = 1;
  int32 id = 2;
}

message DeleteAnchorResponse {
  bool success = 1;
}
